
HID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000bf6  00000c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bd  00800064  00800064  00000c8e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f9  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f99  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000515  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000abb  00000000  00000000  00002475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000668  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000592  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003bea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	bd c4       	rjmp	.+2426   	; 0x97e <__vector_1>
   4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
   6:	8a c0       	rjmp	.+276    	; 0x11c <__bad_interrupt>
   8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
   a:	88 c0       	rjmp	.+272    	; 0x11c <__bad_interrupt>
   c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
   e:	86 c0       	rjmp	.+268    	; 0x11c <__bad_interrupt>
  10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
  12:	84 c0       	rjmp	.+264    	; 0x11c <__bad_interrupt>
  14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
  16:	82 c0       	rjmp	.+260    	; 0x11c <__bad_interrupt>
  18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
  1a:	80 c0       	rjmp	.+256    	; 0x11c <__bad_interrupt>
  1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
  1e:	7e c0       	rjmp	.+252    	; 0x11c <__bad_interrupt>
  20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
  22:	7c c0       	rjmp	.+248    	; 0x11c <__bad_interrupt>
  24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>

00000026 <usbDescriptorHidReport>:
  26:	05 01 09 06 a1 01 85 01 05 07 19 e0 29 e7 15 00     ............)...
  36:	25 01 75 01 95 08 81 02 95 06 75 08 25 65 19 00     %.u.......u.%e..
  46:	29 65 81 00 c0 05 01 09 02 a1 01 09 01 a1 00 85     )e..............
  56:	02 05 09 19 01 29 03 15 00 25 01 95 03 75 01 81     .....)...%...u..
  66:	02 95 01 75 05 81 03 05 01 09 30 09 31 15 81 25     ...u......0.1..%
  76:	7f 75 08 95 02 81 06 c0 c0                          .u.......

0000007f <keyReport>:
  7f:	00 1a 04 16 07 09 51 50 4f 52 2c 0e 0f              ......QPOR,..

0000008c <usbDescriptorString0>:
  8c:	04 03 09 04                                         ....

00000090 <usbDescriptorStringVendor>:
  90:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  a0:	74 00                                               t.

000000a2 <usbDescriptorStringDevice>:
  a2:	10 03 48 00 49 00 44 00 4b 00 65 00 79 00 73 00     ..H.I.D.K.e.y.s.

000000b2 <usbDescriptorDevice>:
  b2:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  c2:	00 01                                               ..

000000c4 <usbDescriptorConfiguration>:
  c4:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  d4:	00 00 09 21 01 01 00 01 22 59 00 07 05 81 03 08     ...!...."Y......
  e4:	00 0a                                               ..

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d4 e0       	ldi	r29, 0x04	; 4
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e6 ef       	ldi	r30, 0xF6	; 246
  fa:	fb e0       	ldi	r31, 0x0B	; 11
  fc:	02 c0       	rjmp	.+4      	; 0x102 <.do_copy_data_start>

000000fe <.do_copy_data_loop>:
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0

00000102 <.do_copy_data_start>:
 102:	a4 36       	cpi	r26, 0x64	; 100
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <.do_copy_data_loop>

00000108 <__do_clear_bss>:
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	a4 e6       	ldi	r26, 0x64	; 100
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	a1 32       	cpi	r26, 0x21	; 33
 114:	b1 07       	cpc	r27, r17
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	e3 d0       	rcall	.+454    	; 0x2e0 <main>
 11a:	6b c5       	rjmp	.+2774   	; 0xbf2 <_exit>

0000011c <__bad_interrupt>:
 11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <usbFunctionSetup>:
//																	//
//////////////////////////////////////////////////////////////////////

uchar	usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 11e:	fc 01       	movw	r30, r24

uint8_t reportID;

    
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 120:	80 81       	ld	r24, Z
 122:	80 76       	andi	r24, 0x60	; 96
 124:	80 32       	cpi	r24, 0x20	; 32
 126:	49 f5       	brne	.+82     	; 0x17a <usbFunctionSetup+0x5c>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	a9 f4       	brne	.+42     	; 0x158 <usbFunctionSetup+0x3a>
            
			reportID = rq->wValue.bytes[0];
 12e:	82 81       	ldd	r24, Z+2	; 0x02

			if(reportID==1)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f4       	brne	.+16     	; 0x144 <usbFunctionSetup+0x26>
			 {
            	usbMsgPtr = reportBufferKeyboard;
 134:	81 e7       	ldi	r24, 0x71	; 113
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 06 01 	sts	0x0106, r25
 13c:	80 93 05 01 	sts	0x0105, r24
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	08 95       	ret
				return sizeof(reportBufferKeyboard);
			 }
			else if(reportID==2)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	c9 f4       	brne	.+50     	; 0x17a <usbFunctionSetup+0x5c>
			 {
			  	usbMsgPtr = reportBufferMouse;
 148:	89 e7       	ldi	r24, 0x79	; 121
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 06 01 	sts	0x0106, r25
 150:	80 93 05 01 	sts	0x0105, r24
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	08 95       	ret
				return sizeof(reportBufferMouse);
			 }
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	41 f4       	brne	.+16     	; 0x16c <usbFunctionSetup+0x4e>
            usbMsgPtr = &idleRate;
 15c:	8d e7       	ldi	r24, 0x7D	; 125
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 06 01 	sts	0x0106, r25
 164:	80 93 05 01 	sts	0x0105, r24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 16c:	8a 30       	cpi	r24, 0x0A	; 10
 16e:	29 f4       	brne	.+10     	; 0x17a <usbFunctionSetup+0x5c>
            idleRate = rq->wValue.bytes[1];
 170:	83 81       	ldd	r24, Z+3	; 0x03
 172:	80 93 7d 00 	sts	0x007D, r24
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
 17a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
}
 17c:	08 95       	ret

0000017e <moveMouse>:
//////////////////////////////////////////////////////////////////////

void moveMouse(int8_t x, int8_t y)
{

     reportBufferMouse[0]=2;  //report id of mouse, see report descriptor for this id
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	90 93 79 00 	sts	0x0079, r25
	 reportBufferMouse[1]=button_state; // to keep last state of mouse button alive
 184:	90 91 70 00 	lds	r25, 0x0070
 188:	90 93 7a 00 	sts	0x007A, r25
	 reportBufferMouse[2]=x;	//move mouse cursor in x-axis
 18c:	80 93 7b 00 	sts	0x007B, r24
	 reportBufferMouse[3]=y;	//move mouse cursor in y-axis
 190:	60 93 7c 00 	sts	0x007C, r22
	 //if(x==0 && y==0)
	  //reportBufferMouse[1]=0;
	 //while(!usbInterruptIsReady()); //wait until interrupt is ready

	//wait until interrupt is ready
	if(usbInterruptIsReady())
 194:	80 91 f6 00 	lds	r24, 0x00F6
 198:	84 ff       	sbrs	r24, 4
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <moveMouse+0x26>
	//this function actually sends the reportBuffer data
	 usbSetInterrupt(reportBufferMouse,sizeof(reportBufferMouse));
 19c:	89 e7       	ldi	r24, 0x79	; 121
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	b3 d3       	rcall	.+1894   	; 0x90a <usbSetInterrupt>
 1a4:	08 95       	ret

000001a6 <releaseMouse>:
//////////////////////////////////////////////////////////////////////

void releaseMouse(uint8_t key)
{
   //reset appropriate bit from 3 bits
   button_state&=~key;   
 1a6:	80 95       	com	r24
 1a8:	90 91 70 00 	lds	r25, 0x0070
 1ac:	89 23       	and	r24, r25
 1ae:	80 93 70 00 	sts	0x0070, r24

   reportBufferMouse[0]=2; //this is report id
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	90 93 79 00 	sts	0x0079, r25

   reportBufferMouse[1]=button_state;   //this is buttons
 1b8:	80 93 7a 00 	sts	0x007A, r24

   reportBufferMouse[2]=0; //do not move on x axis
 1bc:	10 92 7b 00 	sts	0x007B, r1
   reportBufferMouse[3]=0; //do not move on y axis
 1c0:	10 92 7c 00 	sts	0x007C, r1

   //while(!usbInterruptIsReady()); //wait until interrupt is ready
   
   //wait until interrupt is ready
   if(usbInterruptIsReady())
 1c4:	80 91 f6 00 	lds	r24, 0x00F6
 1c8:	84 ff       	sbrs	r24, 4
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <releaseMouse+0x2e>
   //this function actually sends the reportBuffer data
   	usbSetInterrupt(reportBufferMouse,sizeof(reportBufferMouse));
 1cc:	89 e7       	ldi	r24, 0x79	; 121
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	9b d3       	rcall	.+1846   	; 0x90a <usbSetInterrupt>
 1d4:	08 95       	ret

000001d6 <pressMouse>:
// 	use to press mouse button event in computer						//
//  																//
//////////////////////////////////////////////////////////////////////

void pressMouse(uint8_t button)
{
 1d6:	98 2f       	mov	r25, r24

   reportBufferMouse[0]=2; //this is report id
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 79 00 	sts	0x0079, r24

   if(button==0)
 1de:	99 23       	and	r25, r25
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <pressMouse+0x12>
    button_state=0b00000000;   	  //this is buttons
 1e2:	10 92 70 00 	sts	0x0070, r1
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <pressMouse+0x2a>
   else if(button==1) 			  //left button click
 1e8:	91 30       	cpi	r25, 0x01	; 1
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <pressMouse+0x1a>
    button_state=0b00000001;	  
   else if(button==2)			  //right button click
 1ec:	92 30       	cpi	r25, 0x02	; 2
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <pressMouse+0x20>
    button_state=0b00000010;
 1f0:	90 93 70 00 	sts	0x0070, r25
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <pressMouse+0x2a>
   else if(button==3)			  //middle button click
 1f6:	93 30       	cpi	r25, 0x03	; 3
 1f8:	19 f4       	brne	.+6      	; 0x200 <pressMouse+0x2a>
    button_state=0b00000100;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 70 00 	sts	0x0070, r24
   
   reportBufferMouse[1]=button_state;   //button state, to enable click drag feature
 200:	80 91 70 00 	lds	r24, 0x0070
 204:	80 93 7a 00 	sts	0x007A, r24
   reportBufferMouse[2]=0; 				//do not move on x axis
 208:	10 92 7b 00 	sts	0x007B, r1
   reportBufferMouse[3]=0; 				//do not move on y axis
 20c:	10 92 7c 00 	sts	0x007C, r1

   //while(!usbInterruptIsReady()); //wait until interrupt is ready
   
   //wait until interrupt is ready
   if(usbInterruptIsReady())
 210:	80 91 f6 00 	lds	r24, 0x00F6
 214:	84 ff       	sbrs	r24, 4
 216:	04 c0       	rjmp	.+8      	; 0x220 <pressMouse+0x4a>
   //this function actually sends the reportBuffer data
   	usbSetInterrupt(reportBufferMouse,sizeof(reportBufferMouse));
 218:	89 e7       	ldi	r24, 0x79	; 121
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	75 d3       	rcall	.+1770   	; 0x90a <usbSetInterrupt>
 220:	08 95       	ret

00000222 <releaseKey>:

 uint8_t i;//,j;

 

	 reportBufferKeyboard[0]=1; //this is report id
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	90 93 71 00 	sts	0x0071, r25
	 reportBufferKeyboard[1]=0; //no modifier
 228:	10 92 72 00 	sts	0x0072, r1
 22c:	a3 e7       	ldi	r26, 0x73	; 115
 22e:	b0 e0       	ldi	r27, 0x00	; 0
	//find out if the request key is really pressed or not from our buffer

	 for(i=2;i<8;i++)
	  {
	   
	    if(reportBufferKeyboard[i]==pgm_read_byte(&keyReport[key]))
 230:	e8 2f       	mov	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e1 58       	subi	r30, 0x81	; 129
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	94 91       	lpm	r25, Z+
 23a:	8c 91       	ld	r24, X
 23c:	89 17       	cp	r24, r25
 23e:	09 f4       	brne	.+2      	; 0x242 <releaseKey+0x20>
		//yes the key is pressed let's release it now
	    	reportBufferKeyboard[i]=0;
 240:	1c 92       	st	X, r1
 242:	11 96       	adiw	r26, 0x01	; 1
	 reportBufferKeyboard[0]=1; //this is report id
	 reportBufferKeyboard[1]=0; //no modifier
	 
	//find out if the request key is really pressed or not from our buffer

	 for(i=2;i<8;i++)
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	a9 37       	cpi	r26, 0x79	; 121
 248:	b8 07       	cpc	r27, r24
 24a:	b9 f7       	brne	.-18     	; 0x23a <releaseKey+0x18>
		//yes the key is pressed let's release it now
	    	reportBufferKeyboard[i]=0;
	  }
	
	//wait until ready
	while(!usbInterruptIsReady());
 24c:	80 91 f6 00 	lds	r24, 0x00F6
 250:	84 ff       	sbrs	r24, 4
 252:	fc cf       	rjmp	.-8      	; 0x24c <releaseKey+0x2a>
  	
	//this function actually sends the reportBuffer data
    usbSetInterrupt(reportBufferKeyboard,sizeof(reportBufferKeyboard));
 254:	81 e7       	ldi	r24, 0x71	; 113
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	68 e0       	ldi	r22, 0x08	; 8
 25a:	57 d3       	rcall	.+1710   	; 0x90a <usbSetInterrupt>
  
}
 25c:	08 95       	ret

0000025e <pressKey>:
void pressKey(uint8_t key)
{

 	uint8_t i;

	reportBufferKeyboard[0]=1; //this is report id
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	90 93 71 00 	sts	0x0071, r25
	reportBufferKeyboard[1]=0; //no modifier
 264:	10 92 72 00 	sts	0x0072, r1
	
	//check first if these key is already pressed or not!!!
	if(reportBufferKeyboard[2]!=pgm_read_byte(&keyReport[key]) &&
 268:	48 2f       	mov	r20, r24
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	41 58       	subi	r20, 0x81	; 129
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	fa 01       	movw	r30, r20
 272:	94 91       	lpm	r25, Z+
 274:	80 91 73 00 	lds	r24, 0x0073
 278:	89 17       	cp	r24, r25
 27a:	49 f1       	breq	.+82     	; 0x2ce <pressKey+0x70>
 27c:	80 91 74 00 	lds	r24, 0x0074
 280:	89 17       	cp	r24, r25
 282:	29 f1       	breq	.+74     	; 0x2ce <pressKey+0x70>
 284:	80 91 75 00 	lds	r24, 0x0075
 288:	89 17       	cp	r24, r25
 28a:	09 f1       	breq	.+66     	; 0x2ce <pressKey+0x70>
 28c:	80 91 76 00 	lds	r24, 0x0076
 290:	89 17       	cp	r24, r25
 292:	e9 f0       	breq	.+58     	; 0x2ce <pressKey+0x70>
 294:	80 91 77 00 	lds	r24, 0x0077
 298:	89 17       	cp	r24, r25
 29a:	c9 f0       	breq	.+50     	; 0x2ce <pressKey+0x70>
 29c:	80 91 78 00 	lds	r24, 0x0078
 2a0:	89 17       	cp	r24, r25
 2a2:	a9 f0       	breq	.+42     	; 0x2ce <pressKey+0x70>
 2a4:	22 e0       	ldi	r18, 0x02	; 2
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	92 2f       	mov	r25, r18

		  //check if any buffer is empty
		  //if it's empty then only put character into buffer
		  //otherwise :(

	      if(reportBufferKeyboard[i]==0)
 2aa:	d9 01       	movw	r26, r18
 2ac:	af 58       	subi	r26, 0x8F	; 143
 2ae:	bf 4f       	sbci	r27, 0xFF	; 255
 2b0:	8c 91       	ld	r24, X
 2b2:	88 23       	and	r24, r24
 2b4:	21 f4       	brne	.+8      	; 0x2be <pressKey+0x60>
		   {
		    
			//ok, this buffer is still empty i can add keystroke to this buffer

		    reportBufferKeyboard[i]=pgm_read_byte(&keyReport[key]);
 2b6:	fa 01       	movw	r30, r20
 2b8:	84 91       	lpm	r24, Z+
 2ba:	8c 93       	st	X, r24
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <pressKey+0x6c>

			//added to buffer i don't need to check for any more buffer
			//key is already ready to be pressed 
			//so come out of the loop

			break;
 2be:	9f 5f       	subi	r25, 0xFF	; 255
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
	   {  
	    
		//ok, this key is not pressed, press it now
		//there are 6 multiple keystrokes

    	for(i=2;i<8;i++)
 2c4:	28 30       	cpi	r18, 0x08	; 8
 2c6:	31 05       	cpc	r19, r1
 2c8:	79 f7       	brne	.-34     	; 0x2a8 <pressKey+0x4a>
		   }
	 	 }
		 
		 //shit, no buffer are empty you tried to press more than 6 keys at a time :(

		 if(i==8)
 2ca:	98 30       	cpi	r25, 0x08	; 8
 2cc:	41 f0       	breq	.+16     	; 0x2de <pressKey+0x80>
		  return; //no space to send keystroke
	   }


   //wait until USB device is ready to send another reportBuffer data
   while(!usbInterruptIsReady()); 
 2ce:	80 91 f6 00 	lds	r24, 0x00F6
 2d2:	84 ff       	sbrs	r24, 4
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <pressKey+0x70>
	
   //this function actually sends the reportBuffer data
   usbSetInterrupt(reportBufferKeyboard,sizeof(reportBufferKeyboard));
 2d6:	81 e7       	ldi	r24, 0x71	; 113
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	68 e0       	ldi	r22, 0x08	; 8
 2dc:	16 d3       	rcall	.+1580   	; 0x90a <usbSetInterrupt>
 2de:	08 95       	ret

000002e0 <main>:
/////////////////////////////////////////////////////////////////////


//main file
int	main(void)
{
 2e0:	2f 92       	push	r2
 2e2:	3f 92       	push	r3
 2e4:	4f 92       	push	r4
 2e6:	5f 92       	push	r5
 2e8:	6f 92       	push	r6
 2ea:	7f 92       	push	r7
 2ec:	8f 92       	push	r8
 2ee:	9f 92       	push	r9
 2f0:	af 92       	push	r10
 2f2:	bf 92       	push	r11
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29

	uchar   idleCounter = 0; //device should remain idle for sometime
	
	wdt_enable(WDTO_2S); 	 //enable watchdog, in any case if restart is necesarry
 304:	2f e0       	ldi	r18, 0x0F	; 15
 306:	88 e1       	ldi	r24, 0x18	; 24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	a8 95       	wdr
 310:	81 bd       	out	0x21, r24	; 33
 312:	0f be       	out	0x3f, r0	; 63
 314:	21 bd       	out	0x21, r18	; 33

static void hardwareInit(void)
{
uchar	i, j;

    PORTB = 0b11000000;    //de-activate pullups on all pins of PORTB
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	88 bb       	out	0x18, r24	; 24
    DDRB = 0b11000000;     // all pins are input, MSB 2 pins are not present in uC
 31a:	87 bb       	out	0x17, r24	; 23
    PORTC = 0b11000000;    // de-activate pullups on all pins of PORTC 
 31c:	85 bb       	out	0x15, r24	; 21
    DDRC = 0b11000000;     // all pins are input, MSB 2 pins are not present in uC
 31e:	84 bb       	out	0x14, r24	; 20
    PORTD = 0b00000000;    // de-activate pullups on all pins of PORTD
 320:	12 ba       	out	0x12, r1	; 18
    DDRD = 0b00000101;     // all pins input except USB (-> USB reset) 
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	81 bb       	out	0x11, r24	; 17
	while(--j){     /* USB Reset by device only required on Watchdog Reset */
		i = 0;
		while(--i); /* delay >10ms for USB reset */
	}
    
	DDRD = 0x00;
 326:	11 ba       	out	0x11, r1	; 17

    /* configure timer 0 for a rate of 12M/(1024 * 256) = 45.78 Hz (~22ms) */
    TCCR0 = 5;      /* timer 0 prescaler: 1024 */
 328:	83 bf       	out	0x33, r24	; 51
 32a:	ef e7       	ldi	r30, 0x7F	; 127
 32c:	f0 e0       	ldi	r31, 0x00	; 0
	hardwareInit();			 //initialize hardware
	
	for(uint8_t i=0;i<TOTAL_KEYS;i++) //reset all buffers and values of struct to 0
	 {
	  for(uint8_t j=0;j<BUFFER_BYTES;j++)
	  	inputs[i].measurementBuffer[j]=0;
 32e:	10 82       	st	Z, r1
 330:	11 82       	std	Z+1, r1	; 0x01
 332:	12 82       	std	Z+2, r1	; 0x02

	  inputs[i].oldestMeasurement=0;
 334:	13 82       	std	Z+3, r1	; 0x03
	  inputs[i].bufferSum=0;
 336:	14 82       	std	Z+4, r1	; 0x04
	  inputs[i].pressed=0;
 338:	15 82       	std	Z+5, r1	; 0x05
 33a:	36 96       	adiw	r30, 0x06	; 6
	
	wdt_enable(WDTO_2S); 	 //enable watchdog, in any case if restart is necesarry
	
	hardwareInit();			 //initialize hardware
	
	for(uint8_t i=0;i<TOTAL_KEYS;i++) //reset all buffers and values of struct to 0
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	eb 3e       	cpi	r30, 0xEB	; 235
 340:	f2 07       	cpc	r31, r18
 342:	a9 f7       	brne	.-22     	; 0x32e <main+0x4e>
	  inputs[i].oldestMeasurement=0;
	  inputs[i].bufferSum=0;
	  inputs[i].pressed=0;
	 }
	
	TCCR1B=(1<<CS11);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	8e bd       	out	0x2e, r24	; 46

	odDebugInit();
	usbInit();
 348:	d0 d1       	rcall	.+928    	; 0x6ea <usbInit>


	sei();
 34a:	78 94       	sei
 34c:	55 24       	eor	r5, r5
    newMeasurement=(PIND&(1<<(i-10)));  //start from pd3 to pd7

   newMeasurement=!newMeasurement;

   if(newMeasurement)
    currentByte |= (1<<bitCounter);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	68 2e       	mov	r6, r24
 352:	71 2c       	mov	r7, r1
   else if(i==12)
    newMeasurement=(PIND&(1<<1));       //this is pd1
   else if(i>12 && i<18)
    newMeasurement=(PIND&(1<<(i-10)));  //start from pd3 to pd7

   newMeasurement=!newMeasurement;
 354:	44 24       	eor	r4, r4
 356:	43 94       	inc	r4
 358:	aa 24       	eor	r10, r10
 35a:	a3 94       	inc	r10
 35c:	01 c0       	rjmp	.+2      	; 0x360 <main+0x80>

	odDebugInit();
	usbInit();


	sei();
 35e:	58 2e       	mov	r5, r24
    DBG1(0x00, 0, 0);

	for(;;){			/* main event loop */
		wdt_reset();
 360:	a8 95       	wdr
		usbPoll();		//This function must be called at least once in 50ms
 362:	d0 d1       	rcall	.+928    	; 0x704 <usbPoll>
 uint8_t i,newMeasurement=0,currentByte,currentMeasurement;

 for(i=0;i<TOTAL_KEYS;i++)
  {
   
   currentByte=inputs[i].measurementBuffer[byteCounter];
 364:	90 90 6e 00 	lds	r9, 0x006E

   inputs[i].oldestMeasurement=(currentByte>>bitCounter)&0x01;
 368:	e0 90 6f 00 	lds	r14, 0x006F
    newMeasurement=(PIND&(1<<(i-10)));  //start from pd3 to pd7

   newMeasurement=!newMeasurement;

   if(newMeasurement)
    currentByte |= (1<<bitCounter);
 36c:	63 01       	movw	r12, r6
 36e:	0e 2c       	mov	r0, r14
 370:	02 c0       	rjmp	.+4      	; 0x376 <main+0x96>
 372:	cc 0c       	add	r12, r12
 374:	dd 1c       	adc	r13, r13
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <main+0x92>
 37a:	bc 2c       	mov	r11, r12
   else
    currentByte &= ~(1<<bitCounter);
 37c:	8c 2c       	mov	r8, r12
 37e:	80 94       	com	r8
 380:	c9 2d       	mov	r28, r9
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	c1 58       	subi	r28, 0x81	; 129
 386:	df 4f       	sbci	r29, 0xFF	; 255
 388:	e2 e8       	ldi	r30, 0x82	; 130
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	1e 01       	movw	r2, r28
 38e:	8f 01       	movw	r16, r30
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	6a ef       	ldi	r22, 0xFA	; 250
 398:	7f ef       	ldi	r23, 0xFF	; 255
 39a:	34 2f       	mov	r19, r20
 uint8_t i,newMeasurement=0,currentByte,currentMeasurement;

 for(i=0;i<TOTAL_KEYS;i++)
  {
   
   currentByte=inputs[i].measurementBuffer[byteCounter];
 39c:	d1 01       	movw	r26, r2
 39e:	fc 90       	ld	r15, X

   inputs[i].oldestMeasurement=(currentByte>>bitCounter)&0x01;
 3a0:	8f 2d       	mov	r24, r15
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 2c       	mov	r0, r14
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <main+0xcc>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <main+0xc8>
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	d8 01       	movw	r26, r16
 3b4:	8c 93       	st	X, r24
   
   if(i<6)
 3b6:	46 30       	cpi	r20, 0x06	; 6
 3b8:	48 f4       	brcc	.+18     	; 0x3cc <main+0xec>
    newMeasurement=(PINB&(1<<i));		//pin0 to 5 portb
 3ba:	26 b3       	in	r18, 0x16	; 22
 3bc:	c3 01       	movw	r24, r6
 3be:	04 2e       	mov	r0, r20
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <main+0xe6>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <main+0xe2>
 3ca:	1f c0       	rjmp	.+62     	; 0x40a <main+0x12a>
   else if(i>=6 && i<12)
 3cc:	66 30       	cpi	r22, 0x06	; 6
 3ce:	48 f4       	brcc	.+18     	; 0x3e2 <main+0x102>
    newMeasurement=(PINC&(1<<(i-6)));   //this is pc0-5
 3d0:	23 b3       	in	r18, 0x13	; 19
 3d2:	c3 01       	movw	r24, r6
 3d4:	06 2e       	mov	r0, r22
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <main+0xfc>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <main+0xf8>
 3e0:	14 c0       	rjmp	.+40     	; 0x40a <main+0x12a>
   else if(i==12)
 3e2:	4c 30       	cpi	r20, 0x0C	; 12
 3e4:	19 f4       	brne	.+6      	; 0x3ec <main+0x10c>
    newMeasurement=(PIND&(1<<1));       //this is pd1
 3e6:	20 b3       	in	r18, 0x10	; 16
 3e8:	22 70       	andi	r18, 0x02	; 2
 3ea:	10 c0       	rjmp	.+32     	; 0x40c <main+0x12c>
   else if(i>12 && i<18)
 3ec:	3d 50       	subi	r19, 0x0D	; 13
 3ee:	35 30       	cpi	r19, 0x05	; 5
 3f0:	68 f4       	brcc	.+26     	; 0x40c <main+0x12c>
    newMeasurement=(PIND&(1<<(i-10)));  //start from pd3 to pd7
 3f2:	20 b3       	in	r18, 0x10	; 16
 3f4:	4a 50       	subi	r20, 0x0A	; 10
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	c3 01       	movw	r24, r6
 3fa:	04 2e       	mov	r0, r20
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <main+0x122>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <main+0x11e>
 406:	46 5f       	subi	r20, 0xF6	; 246
 408:	5f 4f       	sbci	r21, 0xFF	; 255
 40a:	28 23       	and	r18, r24

   newMeasurement=!newMeasurement;
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	22 23       	and	r18, r18
 410:	09 f4       	brne	.+2      	; 0x414 <main+0x134>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	28 2f       	mov	r18, r24

   if(newMeasurement)
 416:	88 23       	and	r24, r24
 418:	19 f0       	breq	.+6      	; 0x420 <main+0x140>
    currentByte |= (1<<bitCounter);
 41a:	8b 2d       	mov	r24, r11
 41c:	8f 29       	or	r24, r15
 41e:	02 c0       	rjmp	.+4      	; 0x424 <main+0x144>
   else
    currentByte &= ~(1<<bitCounter);
 420:	88 2d       	mov	r24, r8
 422:	8f 21       	and	r24, r15
   
   inputs[i].measurementBuffer[byteCounter] = currentByte;
 424:	d1 01       	movw	r26, r2
 426:	8c 93       	st	X, r24
 428:	4f 5f       	subi	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	28 0e       	add	r2, r24
 432:	39 1e       	adc	r3, r25
 434:	0a 5f       	subi	r16, 0xFA	; 250
 436:	1f 4f       	sbci	r17, 0xFF	; 255
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	7f 4f       	sbci	r23, 0xFF	; 255

static uchar keyPressed(void)
{
 uint8_t i,newMeasurement=0,currentByte,currentMeasurement;

 for(i=0;i<TOTAL_KEYS;i++)
 43c:	42 31       	cpi	r20, 0x12	; 18
 43e:	51 05       	cpc	r21, r1
 440:	09 f0       	breq	.+2      	; 0x444 <main+0x164>
 442:	ab cf       	rjmp	.-170    	; 0x39a <main+0xba>
   //update buffer sums
 for(i=0;i<TOTAL_KEYS;i++)
  {
   currentByte=inputs[i].measurementBuffer[byteCounter];
   currentMeasurement=(currentByte>>bitCounter)&0x01;
   if(currentMeasurement)
 444:	88 81       	ld	r24, Y
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	8c 21       	and	r24, r12
 44a:	9d 21       	and	r25, r13
 44c:	89 2b       	or	r24, r25
 44e:	19 f0       	breq	.+6      	; 0x456 <main+0x176>
    inputs[i].bufferSum++;
 450:	81 81       	ldd	r24, Z+1	; 0x01
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	81 83       	std	Z+1, r24	; 0x01
   
   if(inputs[i].oldestMeasurement)
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	19 f0       	breq	.+6      	; 0x462 <__stack+0x3>
    inputs[i].bufferSum--;
 45c:	81 81       	ldd	r24, Z+1	; 0x01
 45e:	81 50       	subi	r24, 0x01	; 1
 460:	81 83       	std	Z+1, r24	; 0x01
 462:	26 96       	adiw	r28, 0x06	; 6
 464:	36 96       	adiw	r30, 0x06	; 6
    currentByte &= ~(1<<bitCounter);
   
   inputs[i].measurementBuffer[byteCounter] = currentByte;
  }
   //update buffer sums
 for(i=0;i<TOTAL_KEYS;i++)
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	ee 3e       	cpi	r30, 0xEE	; 238
 46a:	f9 07       	cpc	r31, r25
 46c:	59 f7       	brne	.-42     	; 0x444 <main+0x164>
   
   if(inputs[i].oldestMeasurement)
    inputs[i].bufferSum--;
  }
  
   bitCounter++;
 46e:	8e 2d       	mov	r24, r14
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 6f 00 	sts	0x006F, r24
   if(bitCounter==8)
 476:	88 30       	cpi	r24, 0x08	; 8
 478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
    {
	 bitCounter=0;
 47a:	10 92 6f 00 	sts	0x006F, r1
	 byteCounter++;
 47e:	89 2d       	mov	r24, r9
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 93 6e 00 	sts	0x006E, r24
	 if(byteCounter==BUFFER_BYTES)
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	11 f4       	brne	.+4      	; 0x48e <__stack+0x2f>
	  byteCounter=0;
 48a:	10 92 6e 00 	sts	0x006E, r1
 48e:	c3 e8       	ldi	r28, 0x83	; 131
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	01 e0       	ldi	r16, 0x01	; 1
	}
    
	for(i=0;i<TOTAL_KEYS;i++)
	{

	 if (inputs[i].pressed)
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	98 81       	ld	r25, Y
 49a:	88 23       	and	r24, r24
 49c:	21 f1       	breq	.+72     	; 0x4e6 <__stack+0x87>
	  {
	 	if(inputs[i].bufferSum<RELEASE_THRESHOLD) //release key
 49e:	9c 30       	cpi	r25, 0x0C	; 12
 4a0:	0c f0       	brlt	.+2      	; 0x4a4 <__stack+0x45>
 4a2:	43 c0       	rjmp	.+134    	; 0x52a <__stack+0xcb>
	  	 { 
		    inputs[i].pressed = 0;
 4a4:	19 82       	std	Y+1, r1	; 0x01

			if(i==16)
 4a6:	10 31       	cpi	r17, 0x10	; 16
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__stack+0x4f>
			 releaseMouse(LEFT_BUTTON); //release left and right mouse button
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <__stack+0x55>
			else if(i==17)
 4ae:	11 31       	cpi	r17, 0x11	; 17
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <__stack+0x59>
			 releaseMouse(RIGHT_BUTTON);
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	78 de       	rcall	.-784    	; 0x1a6 <releaseMouse>
 4b6:	39 c0       	rjmp	.+114    	; 0x52a <__stack+0xcb>
  			else if(i==15)
 4b8:	1f 30       	cpi	r17, 0x0F	; 15
 4ba:	19 f4       	brne	.+6      	; 0x4c2 <__stack+0x63>
			 xPositive = 0; //right arrow
 4bc:	10 92 64 00 	sts	0x0064, r1
 4c0:	34 c0       	rjmp	.+104    	; 0x52a <__stack+0xcb>
			else if(i==14)
 4c2:	1e 30       	cpi	r17, 0x0E	; 14
 4c4:	19 f4       	brne	.+6      	; 0x4cc <__stack+0x6d>
			 xNegative = 0; //left arrow
 4c6:	10 92 66 00 	sts	0x0066, r1
 4ca:	2f c0       	rjmp	.+94     	; 0x52a <__stack+0xcb>
			else if(i==13)
 4cc:	1d 30       	cpi	r17, 0x0D	; 13
 4ce:	19 f4       	brne	.+6      	; 0x4d6 <__stack+0x77>
			 yNegative = 0; //up arrow
 4d0:	10 92 6a 00 	sts	0x006A, r1
 4d4:	2a c0       	rjmp	.+84     	; 0x52a <__stack+0xcb>
			else if(i==12)
 4d6:	1c 30       	cpi	r17, 0x0C	; 12
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <__stack+0x81>
			 yPositive =0;  //down arrow
 4da:	10 92 68 00 	sts	0x0068, r1
 4de:	25 c0       	rjmp	.+74     	; 0x52a <__stack+0xcb>
			else
	  		 releaseKey(i+1);
 4e0:	80 2f       	mov	r24, r16
 4e2:	9f de       	rcall	.-706    	; 0x222 <releaseKey>
 4e4:	22 c0       	rjmp	.+68     	; 0x52a <__stack+0xcb>
			//return 0;
	  	 }
      }
      else if(!inputs[i].pressed)
	  {
	    if(inputs[i].bufferSum>PRESS_THRESHOLD) //press key
 4e6:	9f 30       	cpi	r25, 0x0F	; 15
 4e8:	04 f1       	brlt	.+64     	; 0x52a <__stack+0xcb>
		 {
        	inputs[i].pressed = 1;
 4ea:	49 82       	std	Y+1, r4	; 0x01
			
			if(i==16)
 4ec:	10 31       	cpi	r17, 0x10	; 16
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__stack+0x95>
			 pressMouse(LEFT_BUTTON); //click left mouse button
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__stack+0x9b>
			else if(i==17)
 4f4:	11 31       	cpi	r17, 0x11	; 17
 4f6:	19 f4       	brne	.+6      	; 0x4fe <__stack+0x9f>
			 pressMouse(RIGHT_BUTTON); //right click
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	6d de       	rcall	.-806    	; 0x1d6 <pressMouse>
 4fc:	16 c0       	rjmp	.+44     	; 0x52a <__stack+0xcb>
			else if(i==15)
 4fe:	1f 30       	cpi	r17, 0x0F	; 15
 500:	19 f4       	brne	.+6      	; 0x508 <__stack+0xa9>
			 xPositive=1;
 502:	a0 92 64 00 	sts	0x0064, r10
 506:	11 c0       	rjmp	.+34     	; 0x52a <__stack+0xcb>
			else if(i==14)
 508:	1e 30       	cpi	r17, 0x0E	; 14
 50a:	19 f4       	brne	.+6      	; 0x512 <__stack+0xb3>
			 xNegative=1;
 50c:	a0 92 66 00 	sts	0x0066, r10
 510:	0c c0       	rjmp	.+24     	; 0x52a <__stack+0xcb>
			else if(i==13)
 512:	1d 30       	cpi	r17, 0x0D	; 13
 514:	19 f4       	brne	.+6      	; 0x51c <__stack+0xbd>
			 yNegative=1;
 516:	a0 92 6a 00 	sts	0x006A, r10
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__stack+0xcb>
			else if(i==12)
 51c:	1c 30       	cpi	r17, 0x0C	; 12
 51e:	19 f4       	brne	.+6      	; 0x526 <__stack+0xc7>
			 yPositive=1;
 520:	a0 92 68 00 	sts	0x0068, r10
 524:	02 c0       	rjmp	.+4      	; 0x52a <__stack+0xcb>
			else
			 pressKey(i+1);
 526:	80 2f       	mov	r24, r16
 528:	9a de       	rcall	.-716    	; 0x25e <pressKey>
	 byteCounter++;
	 if(byteCounter==BUFFER_BYTES)
	  byteCounter=0;
	}
    
	for(i=0;i<TOTAL_KEYS;i++)
 52a:	1f 5f       	subi	r17, 0xFF	; 255
 52c:	0f 5f       	subi	r16, 0xFF	; 255
 52e:	26 96       	adiw	r28, 0x06	; 6
 530:	12 31       	cpi	r17, 0x12	; 18
 532:	09 f0       	breq	.+2      	; 0x536 <__stack+0xd7>
 534:	b0 cf       	rjmp	.-160    	; 0x496 <__stack+0x37>
//////////////////////////////////////////////////////////////////////


//mouse speed

if(xPositive || xNegative ||  yPositive || yNegative)
 536:	20 91 64 00 	lds	r18, 0x0064
 53a:	22 23       	and	r18, r18
 53c:	61 f4       	brne	.+24     	; 0x556 <__stack+0xf7>
 53e:	80 91 66 00 	lds	r24, 0x0066
 542:	88 23       	and	r24, r24
 544:	41 f4       	brne	.+16     	; 0x556 <__stack+0xf7>
 546:	80 91 68 00 	lds	r24, 0x0068
 54a:	88 23       	and	r24, r24
 54c:	21 f4       	brne	.+8      	; 0x556 <__stack+0xf7>
 54e:	80 91 6a 00 	lds	r24, 0x006A
 552:	88 23       	and	r24, r24
 554:	01 f1       	breq	.+64     	; 0x596 <__stack+0x137>
{
 mouseSpeedCounter++;
 556:	80 91 6c 00 	lds	r24, 0x006C
 55a:	90 91 6d 00 	lds	r25, 0x006D
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	90 93 6d 00 	sts	0x006D, r25
 564:	80 93 6c 00 	sts	0x006C, r24
 if(mouseSpeedCounter>MOUSE_SPEED)
 568:	85 5f       	subi	r24, 0xF5	; 245
 56a:	91 40       	sbci	r25, 0x01	; 1
 56c:	48 f0       	brcs	.+18     	; 0x580 <__stack+0x121>
  {
   mouseSpeedCounter=0;
 56e:	10 92 6d 00 	sts	0x006D, r1
 572:	10 92 6c 00 	sts	0x006C, r1
   mouseSpeed++;
 576:	80 91 60 00 	lds	r24, 0x0060
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	80 93 60 00 	sts	0x0060, r24
  }
}


//positive up xy axis movement
if(xPositive && yNegative)
 580:	22 23       	and	r18, r18
 582:	49 f0       	breq	.+18     	; 0x596 <__stack+0x137>
 584:	80 91 6a 00 	lds	r24, 0x006A
 588:	88 23       	and	r24, r24
 58a:	29 f0       	breq	.+10     	; 0x596 <__stack+0x137>
 {
  moveMouse(mouseSpeed,-mouseSpeed);
 58c:	60 91 60 00 	lds	r22, 0x0060
 590:	86 2f       	mov	r24, r22
 592:	61 95       	neg	r22
 594:	f4 dd       	rcall	.-1048   	; 0x17e <moveMouse>
  //xyposuponTime=1;
 }

//negative up xy axis movement
if(xNegative && yNegative)
 596:	80 91 66 00 	lds	r24, 0x0066
 59a:	88 23       	and	r24, r24
 59c:	49 f0       	breq	.+18     	; 0x5b0 <__stack+0x151>
 59e:	80 91 6a 00 	lds	r24, 0x006A
 5a2:	88 23       	and	r24, r24
 5a4:	29 f0       	breq	.+10     	; 0x5b0 <__stack+0x151>
 {
  moveMouse(-mouseSpeed,-mouseSpeed);
 5a6:	60 91 60 00 	lds	r22, 0x0060
 5aa:	61 95       	neg	r22
 5ac:	86 2f       	mov	r24, r22
 5ae:	e7 dd       	rcall	.-1074   	; 0x17e <moveMouse>
  //xypos
 }

//positive down xy axis movement
if(xPositive && yPositive)
 5b0:	80 91 64 00 	lds	r24, 0x0064
 5b4:	88 23       	and	r24, r24
 5b6:	41 f0       	breq	.+16     	; 0x5c8 <__stack+0x169>
 5b8:	80 91 68 00 	lds	r24, 0x0068
 5bc:	88 23       	and	r24, r24
 5be:	21 f0       	breq	.+8      	; 0x5c8 <__stack+0x169>
 {
  moveMouse(mouseSpeed,mouseSpeed);
 5c0:	60 91 60 00 	lds	r22, 0x0060
 5c4:	86 2f       	mov	r24, r22
 5c6:	db dd       	rcall	.-1098   	; 0x17e <moveMouse>
 }

//negative down xy axis movement
if(xNegative && yPositive)
 5c8:	80 91 66 00 	lds	r24, 0x0066
 5cc:	88 23       	and	r24, r24
 5ce:	49 f0       	breq	.+18     	; 0x5e2 <__stack+0x183>
 5d0:	80 91 68 00 	lds	r24, 0x0068
 5d4:	88 23       	and	r24, r24
 5d6:	29 f0       	breq	.+10     	; 0x5e2 <__stack+0x183>
 {
  moveMouse(-mouseSpeed,mouseSpeed);
 5d8:	60 91 60 00 	lds	r22, 0x0060
 5dc:	86 2f       	mov	r24, r22
 5de:	81 95       	neg	r24
 5e0:	ce dd       	rcall	.-1124   	; 0x17e <moveMouse>
 }

//positive x axis movement
if(xPositive)
 5e2:	80 91 64 00 	lds	r24, 0x0064
 5e6:	88 23       	and	r24, r24
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <__stack+0x199>
 {
  moveMouse(mouseSpeed,0);
 5ea:	80 91 60 00 	lds	r24, 0x0060
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	c6 dd       	rcall	.-1140   	; 0x17e <moveMouse>
  xposonTime=1;
 5f2:	a0 92 65 00 	sts	0x0065, r10
 5f6:	0f c0       	rjmp	.+30     	; 0x616 <__stack+0x1b7>
 }
else if(!xPositive && xposonTime==1)
 5f8:	10 91 65 00 	lds	r17, 0x0065
 5fc:	11 30       	cpi	r17, 0x01	; 1
 5fe:	59 f4       	brne	.+22     	; 0x616 <__stack+0x1b7>
 {
  moveMouse(0,0);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	bc dd       	rcall	.-1160   	; 0x17e <moveMouse>
  xposonTime=0;
 606:	10 92 65 00 	sts	0x0065, r1
  mouseSpeedCounter=0;
 60a:	10 92 6d 00 	sts	0x006D, r1
 60e:	10 92 6c 00 	sts	0x006C, r1
  mouseSpeed=1;
 612:	10 93 60 00 	sts	0x0060, r17
 }

//negative x axis movement
if(xNegative)
 616:	80 91 66 00 	lds	r24, 0x0066
 61a:	88 23       	and	r24, r24
 61c:	41 f0       	breq	.+16     	; 0x62e <__stack+0x1cf>
 {
  moveMouse(-mouseSpeed,0);
 61e:	80 91 60 00 	lds	r24, 0x0060
 622:	81 95       	neg	r24
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	ab dd       	rcall	.-1194   	; 0x17e <moveMouse>
  xnegonTime=1;
 628:	a0 92 67 00 	sts	0x0067, r10
 62c:	0f c0       	rjmp	.+30     	; 0x64c <__stack+0x1ed>
 }
else if(!xNegative && xnegonTime==1)
 62e:	10 91 67 00 	lds	r17, 0x0067
 632:	11 30       	cpi	r17, 0x01	; 1
 634:	59 f4       	brne	.+22     	; 0x64c <__stack+0x1ed>
 {
  moveMouse(0,0);
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	a1 dd       	rcall	.-1214   	; 0x17e <moveMouse>
  xnegonTime=0;
 63c:	10 92 67 00 	sts	0x0067, r1
  mouseSpeedCounter=0;
 640:	10 92 6d 00 	sts	0x006D, r1
 644:	10 92 6c 00 	sts	0x006C, r1
  mouseSpeed=1;
 648:	10 93 60 00 	sts	0x0060, r17
 }

//positive y axis movement
if(yPositive)
 64c:	80 91 68 00 	lds	r24, 0x0068
 650:	88 23       	and	r24, r24
 652:	39 f0       	breq	.+14     	; 0x662 <__stack+0x203>
 {
  moveMouse(0,mouseSpeed);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	60 91 60 00 	lds	r22, 0x0060
 65a:	91 dd       	rcall	.-1246   	; 0x17e <moveMouse>
  yposonTime=1;
 65c:	a0 92 69 00 	sts	0x0069, r10
 660:	0f c0       	rjmp	.+30     	; 0x680 <__stack+0x221>
 }
else if(!yPositive && yposonTime==1)
 662:	10 91 69 00 	lds	r17, 0x0069
 666:	11 30       	cpi	r17, 0x01	; 1
 668:	59 f4       	brne	.+22     	; 0x680 <__stack+0x221>
 { 
  moveMouse(0,0);
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	87 dd       	rcall	.-1266   	; 0x17e <moveMouse>
  yposonTime=0;
 670:	10 92 69 00 	sts	0x0069, r1
  mouseSpeedCounter=0;
 674:	10 92 6d 00 	sts	0x006D, r1
 678:	10 92 6c 00 	sts	0x006C, r1
  mouseSpeed=1;
 67c:	10 93 60 00 	sts	0x0060, r17
 }

//negative y axis movement
if(yNegative)
 680:	80 91 6a 00 	lds	r24, 0x006A
 684:	88 23       	and	r24, r24
 686:	41 f0       	breq	.+16     	; 0x698 <__stack+0x239>
 {
  moveMouse(0,-mouseSpeed);
 688:	60 91 60 00 	lds	r22, 0x0060
 68c:	61 95       	neg	r22
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	76 dd       	rcall	.-1300   	; 0x17e <moveMouse>
  ynegonTime=1;
 692:	a0 92 6b 00 	sts	0x006B, r10
 696:	0f c0       	rjmp	.+30     	; 0x6b6 <__stack+0x257>
 }
else if(!yNegative && ynegonTime==1)
 698:	10 91 6b 00 	lds	r17, 0x006B
 69c:	11 30       	cpi	r17, 0x01	; 1
 69e:	59 f4       	brne	.+22     	; 0x6b6 <__stack+0x257>
{
 moveMouse(0,0);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	6c dd       	rcall	.-1320   	; 0x17e <moveMouse>
 ynegonTime=0;
 6a6:	10 92 6b 00 	sts	0x006B, r1
 mouseSpeedCounter=0;
 6aa:	10 92 6d 00 	sts	0x006D, r1
 6ae:	10 92 6c 00 	sts	0x006C, r1
 mouseSpeed=1;
 6b2:	10 93 60 00 	sts	0x0060, r17
}




while(TCNT1<=1116);
 6b6:	8c b5       	in	r24, 0x2c	; 44
 6b8:	9d b5       	in	r25, 0x2d	; 45
 6ba:	8d 55       	subi	r24, 0x5D	; 93
 6bc:	94 40       	sbci	r25, 0x04	; 4
 6be:	d8 f3       	brcs	.-10     	; 0x6b6 <__stack+0x257>
TCCR1B=0;
 6c0:	1e bc       	out	0x2e, r1	; 46
TCNT1=0;
 6c2:	1d bc       	out	0x2d, r1	; 45
 6c4:	1c bc       	out	0x2c, r1	; 44
TCCR1B=(1<<CS11);
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	8e bd       	out	0x2e, r24	; 46
		wdt_reset();
		usbPoll();		//This function must be called at least once in 50ms
		
		keyPressed();	//check for key pressed

        if(TIFR & (1<<TOV0)){   // 22 ms timer 
 6ca:	08 b6       	in	r0, 0x38	; 56
 6cc:	00 fe       	sbrs	r0, 0
 6ce:	48 ce       	rjmp	.-880    	; 0x360 <main+0x80>
            TIFR = 1<<TOV0;
 6d0:	48 be       	out	0x38, r4	; 56
            if(idleRate != 0){
 6d2:	80 91 7d 00 	lds	r24, 0x007D
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <__stack+0x27d>
 6da:	42 ce       	rjmp	.-892    	; 0x360 <main+0x80>
                if(idleCounter > 4){
 6dc:	24 e0       	ldi	r18, 0x04	; 4
 6de:	25 15       	cp	r18, r5
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <__stack+0x285>
 6e2:	3d ce       	rjmp	.-902    	; 0x35e <main+0x7e>
                    idleCounter -= 5;   /* 22 ms in units of 4 ms */
 6e4:	3b ef       	ldi	r19, 0xFB	; 251
 6e6:	53 0e       	add	r5, r19
 6e8:	3b ce       	rjmp	.-906    	; 0x360 <main+0x80>

000006ea <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 6ea:	85 b7       	in	r24, 0x35	; 53
 6ec:	83 60       	ori	r24, 0x03	; 3
 6ee:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 6f0:	8b b7       	in	r24, 0x3b	; 59
 6f2:	80 64       	ori	r24, 0x40	; 64
 6f4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 6f6:	8b e4       	ldi	r24, 0x4B	; 75
 6f8:	80 93 f7 00 	sts	0x00F7, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 6fc:	8a e5       	ldi	r24, 0x5A	; 90
 6fe:	80 93 f6 00 	sts	0x00F6, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 702:	08 95       	ret

00000704 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 70a:	90 91 07 01 	lds	r25, 0x0107
 70e:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 710:	97 fd       	sbrc	r25, 7
 712:	a0 c0       	rjmp	.+320    	; 0x854 <usbPoll+0x150>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 714:	20 91 04 01 	lds	r18, 0x0104
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 718:	80 91 03 01 	lds	r24, 0x0103
 71c:	8d 32       	cpi	r24, 0x2D	; 45
 71e:	09 f0       	breq	.+2      	; 0x722 <usbPoll+0x1e>
 720:	97 c0       	rjmp	.+302    	; 0x850 <usbPoll+0x14c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 722:	98 30       	cpi	r25, 0x08	; 8
 724:	09 f0       	breq	.+2      	; 0x728 <usbPoll+0x24>
 726:	94 c0       	rjmp	.+296    	; 0x850 <usbPoll+0x14c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 728:	cc e0       	ldi	r28, 0x0C	; 12
 72a:	d0 e0       	ldi	r29, 0x00	; 0
 72c:	c2 1b       	sub	r28, r18
 72e:	d1 09       	sbc	r29, r1
 730:	c5 5f       	subi	r28, 0xF5	; 245
 732:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 734:	83 ec       	ldi	r24, 0xC3	; 195
 736:	80 93 eb 00 	sts	0x00EB, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 73a:	8a e5       	ldi	r24, 0x5A	; 90
 73c:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
 740:	10 92 7e 00 	sts	0x007E, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 744:	88 81       	ld	r24, Y
 746:	80 76       	andi	r24, 0x60	; 96
 748:	21 f0       	breq	.+8      	; 0x752 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
 74a:	ce 01       	movw	r24, r28
 74c:	e8 dc       	rcall	.-1584   	; 0x11e <usbFunctionSetup>
 74e:	28 2f       	mov	r18, r24
 750:	76 c0       	rjmp	.+236    	; 0x83e <usbPoll+0x13a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 752:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 754:	10 92 f4 00 	sts	0x00F4, r1
    SWITCH_START(rq->bRequest)
 758:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 75a:	88 23       	and	r24, r24
 75c:	21 f4       	brne	.+8      	; 0x766 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 75e:	10 92 f5 00 	sts	0x00F5, r1
 762:	22 e0       	ldi	r18, 0x02	; 2
 764:	66 c0       	rjmp	.+204    	; 0x832 <usbPoll+0x12e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 766:	85 30       	cpi	r24, 0x05	; 5
 768:	19 f4       	brne	.+6      	; 0x770 <usbPoll+0x6c>
        usbNewDeviceAddr = value;
 76a:	90 93 08 01 	sts	0x0108, r25
 76e:	60 c0       	rjmp	.+192    	; 0x830 <usbPoll+0x12c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 770:	86 30       	cpi	r24, 0x06	; 6
 772:	09 f0       	breq	.+2      	; 0x776 <usbPoll+0x72>
 774:	49 c0       	rjmp	.+146    	; 0x808 <usbPoll+0x104>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 776:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	19 f4       	brne	.+6      	; 0x782 <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 77c:	82 eb       	ldi	r24, 0xB2	; 178
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	1a c0       	rjmp	.+52     	; 0x7b6 <usbPoll+0xb2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	41 f4       	brne	.+16     	; 0x796 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 786:	84 ec       	ldi	r24, 0xC4	; 196
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	90 93 06 01 	sts	0x0106, r25
 78e:	80 93 05 01 	sts	0x0105, r24
 792:	22 e2       	ldi	r18, 0x22	; 34
 794:	35 c0       	rjmp	.+106    	; 0x800 <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	f1 f4       	brne	.+60     	; 0x7d6 <usbPoll+0xd2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 79a:	99 23       	and	r25, r25
 79c:	41 f4       	brne	.+16     	; 0x7ae <usbPoll+0xaa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 79e:	8c e8       	ldi	r24, 0x8C	; 140
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	90 93 06 01 	sts	0x0106, r25
 7a6:	80 93 05 01 	sts	0x0105, r24
 7aa:	24 e0       	ldi	r18, 0x04	; 4
 7ac:	29 c0       	rjmp	.+82     	; 0x800 <usbPoll+0xfc>
        SWITCH_CASE(1)
 7ae:	91 30       	cpi	r25, 0x01	; 1
 7b0:	41 f4       	brne	.+16     	; 0x7c2 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 7b2:	80 e9       	ldi	r24, 0x90	; 144
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	90 93 06 01 	sts	0x0106, r25
 7ba:	80 93 05 01 	sts	0x0105, r24
 7be:	22 e1       	ldi	r18, 0x12	; 18
 7c0:	1f c0       	rjmp	.+62     	; 0x800 <usbPoll+0xfc>
        SWITCH_CASE(2)
 7c2:	92 30       	cpi	r25, 0x02	; 2
 7c4:	e1 f4       	brne	.+56     	; 0x7fe <usbPoll+0xfa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 7c6:	82 ea       	ldi	r24, 0xA2	; 162
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	90 93 06 01 	sts	0x0106, r25
 7ce:	80 93 05 01 	sts	0x0105, r24
 7d2:	20 e1       	ldi	r18, 0x10	; 16
 7d4:	15 c0       	rjmp	.+42     	; 0x800 <usbPoll+0xfc>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 7d6:	81 32       	cpi	r24, 0x21	; 33
 7d8:	41 f4       	brne	.+16     	; 0x7ea <usbPoll+0xe6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 7da:	86 ed       	ldi	r24, 0xD6	; 214
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	90 93 06 01 	sts	0x0106, r25
 7e2:	80 93 05 01 	sts	0x0105, r24
 7e6:	29 e0       	ldi	r18, 0x09	; 9
 7e8:	0b c0       	rjmp	.+22     	; 0x800 <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 7ea:	82 32       	cpi	r24, 0x22	; 34
 7ec:	41 f4       	brne	.+16     	; 0x7fe <usbPoll+0xfa>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 7ee:	86 e2       	ldi	r24, 0x26	; 38
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	90 93 06 01 	sts	0x0106, r25
 7f6:	80 93 05 01 	sts	0x0105, r24
 7fa:	29 e5       	ldi	r18, 0x59	; 89
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <usbPoll+0xfc>
 7fe:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 800:	80 e4       	ldi	r24, 0x40	; 64
 802:	80 93 7e 00 	sts	0x007E, r24
 806:	1b c0       	rjmp	.+54     	; 0x83e <usbPoll+0x13a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 808:	88 30       	cpi	r24, 0x08	; 8
 80a:	21 f4       	brne	.+8      	; 0x814 <usbPoll+0x110>
 80c:	21 e0       	ldi	r18, 0x01	; 1
 80e:	8a e0       	ldi	r24, 0x0A	; 10
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	11 c0       	rjmp	.+34     	; 0x836 <usbPoll+0x132>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 814:	89 30       	cpi	r24, 0x09	; 9
 816:	19 f4       	brne	.+6      	; 0x81e <usbPoll+0x11a>
        usbConfiguration = value;
 818:	90 93 0a 01 	sts	0x010A, r25
 81c:	09 c0       	rjmp	.+18     	; 0x830 <usbPoll+0x12c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 81e:	8a 30       	cpi	r24, 0x0A	; 10
 820:	11 f4       	brne	.+4      	; 0x826 <usbPoll+0x122>
 822:	21 e0       	ldi	r18, 0x01	; 1
 824:	06 c0       	rjmp	.+12     	; 0x832 <usbPoll+0x12e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 826:	8b 30       	cpi	r24, 0x0B	; 11
 828:	19 f4       	brne	.+6      	; 0x830 <usbPoll+0x12c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 82a:	8b e4       	ldi	r24, 0x4B	; 75
 82c:	80 93 f7 00 	sts	0x00F7, r24
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	84 ef       	ldi	r24, 0xF4	; 244
 834:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 836:	90 93 06 01 	sts	0x0106, r25
 83a:	80 93 05 01 	sts	0x0105, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 83e:	8f 81       	ldd	r24, Y+7	; 0x07
 840:	88 23       	and	r24, r24
 842:	21 f4       	brne	.+8      	; 0x84c <usbPoll+0x148>
 844:	8e 81       	ldd	r24, Y+6	; 0x06
 846:	82 17       	cp	r24, r18
 848:	08 f4       	brcc	.+2      	; 0x84c <usbPoll+0x148>
 84a:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 84c:	20 93 62 00 	sts	0x0062, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 850:	10 92 07 01 	sts	0x0107, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 854:	80 91 61 00 	lds	r24, 0x0061
 858:	84 ff       	sbrs	r24, 4
 85a:	49 c0       	rjmp	.+146    	; 0x8ee <usbPoll+0x1ea>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 85c:	80 91 62 00 	lds	r24, 0x0062
 860:	8f 3f       	cpi	r24, 0xFF	; 255
 862:	09 f4       	brne	.+2      	; 0x866 <usbPoll+0x162>
 864:	44 c0       	rjmp	.+136    	; 0x8ee <usbPoll+0x1ea>
 866:	18 2f       	mov	r17, r24
 868:	89 30       	cpi	r24, 0x09	; 9
 86a:	08 f0       	brcs	.+2      	; 0x86e <usbPoll+0x16a>
 86c:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 86e:	81 1b       	sub	r24, r17
 870:	80 93 62 00 	sts	0x0062, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 874:	80 91 eb 00 	lds	r24, 0x00EB
 878:	98 e8       	ldi	r25, 0x88	; 136
 87a:	89 27       	eor	r24, r25
 87c:	80 93 eb 00 	sts	0x00EB, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 880:	11 23       	and	r17, r17
 882:	41 f1       	breq	.+80     	; 0x8d4 <usbPoll+0x1d0>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 884:	20 91 05 01 	lds	r18, 0x0105
 888:	30 91 06 01 	lds	r19, 0x0106
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 88c:	80 91 7e 00 	lds	r24, 0x007E
 890:	86 ff       	sbrs	r24, 6
 892:	0d c0       	rjmp	.+26     	; 0x8ae <usbPoll+0x1aa>
 894:	ac ee       	ldi	r26, 0xEC	; 236
 896:	b0 e0       	ldi	r27, 0x00	; 0
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 89c:	f9 01       	movw	r30, r18
 89e:	e8 0f       	add	r30, r24
 8a0:	f9 1f       	adc	r31, r25
 8a2:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 8a4:	ed 93       	st	X+, r30
 8a6:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 8a8:	18 17       	cp	r17, r24
 8aa:	c1 f7       	brne	.-16     	; 0x89c <usbPoll+0x198>
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <usbPoll+0x1ba>
 8ae:	91 2f       	mov	r25, r17
 8b0:	d9 01       	movw	r26, r18
 8b2:	ec ee       	ldi	r30, 0xEC	; 236
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 8b6:	8d 91       	ld	r24, X+
 8b8:	81 93       	st	Z+, r24
                    r++;
                }while(--i);
 8ba:	91 50       	subi	r25, 0x01	; 1
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <usbPoll+0x1b2>
 8be:	11 50       	subi	r17, 0x01	; 1
 8c0:	81 2f       	mov	r24, r17
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	1f 5f       	subi	r17, 0xFF	; 255
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	82 0f       	add	r24, r18
 8ca:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 8cc:	90 93 06 01 	sts	0x0106, r25
 8d0:	80 93 05 01 	sts	0x0105, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 8d4:	8c ee       	ldi	r24, 0xEC	; 236
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	61 2f       	mov	r22, r17
 8da:	4d d0       	rcall	.+154    	; 0x976 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 8dc:	61 2f       	mov	r22, r17
 8de:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 8e0:	6c 30       	cpi	r22, 0x0C	; 12
 8e2:	19 f0       	breq	.+6      	; 0x8ea <usbPoll+0x1e6>
            usbMsgLen = USB_NO_MSG;
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	80 93 62 00 	sts	0x0062, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 8ea:	60 93 61 00 	sts	0x0061, r22
 8ee:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 8f0:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 8f2:	85 70       	andi	r24, 0x05	; 5
 8f4:	31 f4       	brne	.+12     	; 0x902 <usbPoll+0x1fe>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 8f6:	91 50       	subi	r25, 0x01	; 1
 8f8:	d9 f7       	brne	.-10     	; 0x8f0 <usbPoll+0x1ec>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 8fa:	10 92 08 01 	sts	0x0108, r1
    usbDeviceAddr = 0;
 8fe:	10 92 02 01 	sts	0x0102, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	08 95       	ret

0000090a <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 90a:	1f 93       	push	r17
 90c:	dc 01       	movw	r26, r24
 90e:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 910:	80 91 f6 00 	lds	r24, 0x00F6
 914:	84 ff       	sbrs	r24, 4
 916:	07 c0       	rjmp	.+14     	; 0x926 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 918:	80 91 f7 00 	lds	r24, 0x00F7
 91c:	98 e8       	ldi	r25, 0x88	; 136
 91e:	89 27       	eor	r24, r25
 920:	80 93 f7 00 	sts	0x00F7, r24
 924:	03 c0       	rjmp	.+6      	; 0x92c <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 926:	8a e5       	ldi	r24, 0x5A	; 90
 928:	80 93 f6 00 	sts	0x00F6, r24
 92c:	91 2f       	mov	r25, r17
 92e:	e8 ef       	ldi	r30, 0xF8	; 248
 930:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 932:	8d 91       	ld	r24, X+
 934:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 936:	91 50       	subi	r25, 0x01	; 1
 938:	e1 f7       	brne	.-8      	; 0x932 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 93a:	88 ef       	ldi	r24, 0xF8	; 248
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	61 2f       	mov	r22, r17
 940:	1a d0       	rcall	.+52     	; 0x976 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 942:	1c 5f       	subi	r17, 0xFC	; 252
 944:	10 93 f6 00 	sts	0x00F6, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 948:	1f 91       	pop	r17
 94a:	08 95       	ret

0000094c <usbCrc16>:
 94c:	a8 2f       	mov	r26, r24
 94e:	b9 2f       	mov	r27, r25
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	41 e0       	ldi	r20, 0x01	; 1
 956:	50 ea       	ldi	r21, 0xA0	; 160
 958:	60 95       	com	r22
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	09 c0       	rjmp	.+18     	; 0x970 <usbCrcLoopEntry>

0000095e <usbCrcByteLoop>:
 95e:	2d 91       	ld	r18, X+
 960:	82 27       	eor	r24, r18

00000962 <usbCrcBitLoop>:
 962:	97 95       	ror	r25
 964:	87 95       	ror	r24
 966:	10 f0       	brcs	.+4      	; 0x96c <usbCrcNoXor>
 968:	84 27       	eor	r24, r20
 96a:	95 27       	eor	r25, r21

0000096c <usbCrcNoXor>:
 96c:	30 5e       	subi	r19, 0xE0	; 224
 96e:	c8 f3       	brcs	.-14     	; 0x962 <usbCrcBitLoop>

00000970 <usbCrcLoopEntry>:
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	a8 f3       	brcs	.-22     	; 0x95e <usbCrcByteLoop>

00000974 <usbCrcReady>:
 974:	08 95       	ret

00000976 <usbCrc16Append>:
 976:	ea df       	rcall	.-44     	; 0x94c <usbCrc16>
 978:	8d 93       	st	X+, r24
 97a:	9d 93       	st	X+, r25
 97c:	08 95       	ret

0000097e <__vector_1>:
 97e:	cf 93       	push	r28
 980:	cf b7       	in	r28, 0x3f	; 63
 982:	cf 93       	push	r28

00000984 <waitForJ>:
 984:	c3 95       	inc	r28
 986:	80 9b       	sbis	0x10, 0	; 16
 988:	e9 f7       	brne	.-6      	; 0x984 <waitForJ>

0000098a <waitForK>:
 98a:	80 9b       	sbis	0x10, 0	; 16
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <foundK>
 98e:	80 9b       	sbis	0x10, 0	; 16
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <foundK>
 992:	80 9b       	sbis	0x10, 0	; 16
 994:	05 c0       	rjmp	.+10     	; 0x9a0 <foundK>
 996:	80 9b       	sbis	0x10, 0	; 16
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <foundK>
 99a:	80 9b       	sbis	0x10, 0	; 16
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <foundK>
 99e:	a3 c0       	rjmp	.+326    	; 0xae6 <sofError>

000009a0 <foundK>:
 9a0:	df 93       	push	r29
 9a2:	c0 91 04 01 	lds	r28, 0x0104
 9a6:	dd 27       	eor	r29, r29
 9a8:	c5 5f       	subi	r28, 0xF5	; 245
 9aa:	de 4f       	sbci	r29, 0xFE	; 254
 9ac:	80 9b       	sbis	0x10, 0	; 16
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <haveTwoBitsK>
 9b0:	df 91       	pop	r29
 9b2:	eb cf       	rjmp	.-42     	; 0x98a <waitForK>

000009b4 <haveTwoBitsK>:
 9b4:	2f 93       	push	r18
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	00 b3       	in	r16, 0x10	; 16
 9bc:	2f ef       	ldi	r18, 0xFF	; 255
 9be:	00 fb       	bst	r16, 0
 9c0:	20 f9       	bld	r18, 0
 9c2:	4f 93       	push	r20
 9c4:	3f 93       	push	r19
 9c6:	10 b3       	in	r17, 0x10	; 16
 9c8:	4f ef       	ldi	r20, 0xFF	; 255
 9ca:	01 27       	eor	r16, r17
 9cc:	00 fb       	bst	r16, 0
 9ce:	21 f9       	bld	r18, 1
 9d0:	3b e0       	ldi	r19, 0x0B	; 11
 9d2:	31 c0       	rjmp	.+98     	; 0xa36 <rxbit2>

000009d4 <unstuff0>:
 9d4:	4e 7f       	andi	r20, 0xFE	; 254
 9d6:	01 2f       	mov	r16, r17
 9d8:	10 b3       	in	r17, 0x10	; 16
 9da:	21 60       	ori	r18, 0x01	; 1
 9dc:	28 c0       	rjmp	.+80     	; 0xa2e <didUnstuff0>

000009de <unstuff1>:
 9de:	10 2f       	mov	r17, r16
 9e0:	4d 7f       	andi	r20, 0xFD	; 253
 9e2:	22 60       	ori	r18, 0x02	; 2
 9e4:	00 00       	nop
 9e6:	00 b3       	in	r16, 0x10	; 16
 9e8:	29 c0       	rjmp	.+82     	; 0xa3c <didUnstuff1>

000009ea <unstuff2>:
 9ea:	4b 7f       	andi	r20, 0xFB	; 251
 9ec:	24 60       	ori	r18, 0x04	; 4
 9ee:	01 2f       	mov	r16, r17
 9f0:	00 00       	nop
 9f2:	10 b3       	in	r17, 0x10	; 16
 9f4:	2b c0       	rjmp	.+86     	; 0xa4c <didUnstuff2>

000009f6 <unstuff3>:
 9f6:	10 b3       	in	r17, 0x10	; 16
 9f8:	47 7f       	andi	r20, 0xF7	; 247
 9fa:	28 60       	ori	r18, 0x08	; 8
 9fc:	2a c0       	rjmp	.+84     	; 0xa52 <didUnstuff3>

000009fe <unstuff4>:
 9fe:	4f 7e       	andi	r20, 0xEF	; 239
 a00:	00 b3       	in	r16, 0x10	; 16
 a02:	20 61       	ori	r18, 0x10	; 16
 a04:	2c c0       	rjmp	.+88     	; 0xa5e <didUnstuff4>

00000a06 <unstuff5>:
 a06:	4f 7d       	andi	r20, 0xDF	; 223
 a08:	10 b3       	in	r17, 0x10	; 16
 a0a:	20 62       	ori	r18, 0x20	; 32
 a0c:	2f c0       	rjmp	.+94     	; 0xa6c <didUnstuff5>

00000a0e <unstuff6>:
 a0e:	4f 7b       	andi	r20, 0xBF	; 191
 a10:	00 b3       	in	r16, 0x10	; 16
 a12:	20 64       	ori	r18, 0x40	; 64
 a14:	32 c0       	rjmp	.+100    	; 0xa7a <didUnstuff6>

00000a16 <rxLoop>:
 a16:	42 27       	eor	r20, r18
 a18:	00 b3       	in	r16, 0x10	; 16
 a1a:	49 93       	st	Y+, r20
 a1c:	4f ef       	ldi	r20, 0xFF	; 255
 a1e:	00 00       	nop
 a20:	10 27       	eor	r17, r16
 a22:	10 fb       	bst	r17, 0
 a24:	20 f9       	bld	r18, 0
 a26:	10 b3       	in	r17, 0x10	; 16
 a28:	15 70       	andi	r17, 0x05	; 5
 a2a:	c9 f1       	breq	.+114    	; 0xa9e <se0>
 a2c:	29 7f       	andi	r18, 0xF9	; 249

00000a2e <didUnstuff0>:
 a2e:	91 f2       	breq	.-92     	; 0x9d4 <unstuff0>
 a30:	01 27       	eor	r16, r17
 a32:	00 fb       	bst	r16, 0
 a34:	21 f9       	bld	r18, 1

00000a36 <rxbit2>:
 a36:	00 b3       	in	r16, 0x10	; 16
 a38:	23 7f       	andi	r18, 0xF3	; 243
 a3a:	89 f2       	breq	.-94     	; 0x9de <unstuff1>

00000a3c <didUnstuff1>:
 a3c:	31 50       	subi	r19, 0x01	; 1
 a3e:	58 f1       	brcs	.+86     	; 0xa96 <overflow>
 a40:	10 27       	eor	r17, r16
 a42:	10 fb       	bst	r17, 0
 a44:	22 f9       	bld	r18, 2
 a46:	10 b3       	in	r17, 0x10	; 16
 a48:	27 7e       	andi	r18, 0xE7	; 231
 a4a:	79 f2       	breq	.-98     	; 0x9ea <unstuff2>

00000a4c <didUnstuff2>:
 a4c:	01 27       	eor	r16, r17
 a4e:	00 fb       	bst	r16, 0
 a50:	23 f9       	bld	r18, 3

00000a52 <didUnstuff3>:
 a52:	2f 7c       	andi	r18, 0xCF	; 207
 a54:	81 f2       	breq	.-96     	; 0x9f6 <unstuff3>
 a56:	00 b3       	in	r16, 0x10	; 16
 a58:	10 27       	eor	r17, r16
 a5a:	10 fb       	bst	r17, 0
 a5c:	24 f9       	bld	r18, 4

00000a5e <didUnstuff4>:
 a5e:	2f 79       	andi	r18, 0x9F	; 159
 a60:	71 f2       	breq	.-100    	; 0x9fe <unstuff4>
 a62:	00 c0       	rjmp	.+0      	; 0xa64 <didUnstuff4+0x6>
 a64:	10 b3       	in	r17, 0x10	; 16
 a66:	01 27       	eor	r16, r17
 a68:	00 fb       	bst	r16, 0
 a6a:	25 f9       	bld	r18, 5

00000a6c <didUnstuff5>:
 a6c:	2f 73       	andi	r18, 0x3F	; 63
 a6e:	59 f2       	breq	.-106    	; 0xa06 <unstuff5>
 a70:	00 c0       	rjmp	.+0      	; 0xa72 <didUnstuff5+0x6>
 a72:	00 b3       	in	r16, 0x10	; 16
 a74:	10 27       	eor	r17, r16
 a76:	10 fb       	bst	r17, 0
 a78:	26 f9       	bld	r18, 6

00000a7a <didUnstuff6>:
 a7a:	22 30       	cpi	r18, 0x02	; 2
 a7c:	40 f2       	brcs	.-112    	; 0xa0e <unstuff6>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <didUnstuff6+0x6>
 a80:	10 b3       	in	r17, 0x10	; 16
 a82:	01 27       	eor	r16, r17
 a84:	00 fb       	bst	r16, 0
 a86:	27 f9       	bld	r18, 7

00000a88 <didUnstuff7>:
 a88:	24 30       	cpi	r18, 0x04	; 4
 a8a:	28 f6       	brcc	.-118    	; 0xa16 <rxLoop>

00000a8c <unstuff7>:
 a8c:	4f 77       	andi	r20, 0x7F	; 127
 a8e:	20 68       	ori	r18, 0x80	; 128
 a90:	10 b3       	in	r17, 0x10	; 16
 a92:	00 00       	nop
 a94:	f9 cf       	rjmp	.-14     	; 0xa88 <didUnstuff7>

00000a96 <overflow>:
 a96:	10 e4       	ldi	r17, 0x40	; 64
 a98:	1a bf       	out	0x3a, r17	; 58

00000a9a <ignorePacket>:
 a9a:	00 27       	eor	r16, r16
 a9c:	19 c0       	rjmp	.+50     	; 0xad0 <handleSetupOrOut>

00000a9e <se0>:
 a9e:	3b 50       	subi	r19, 0x0B	; 11
 aa0:	31 95       	neg	r19
 aa2:	c3 1b       	sub	r28, r19
 aa4:	d0 40       	sbci	r29, 0x00	; 0
 aa6:	10 e4       	ldi	r17, 0x40	; 64
 aa8:	1a bf       	out	0x3a, r17	; 58
 aaa:	08 81       	ld	r16, Y
 aac:	03 3c       	cpi	r16, 0xC3	; 195
 aae:	f9 f0       	breq	.+62     	; 0xaee <handleData>
 ab0:	0b 34       	cpi	r16, 0x4B	; 75
 ab2:	e9 f0       	breq	.+58     	; 0xaee <handleData>
 ab4:	20 91 02 01 	lds	r18, 0x0102
 ab8:	19 81       	ldd	r17, Y+1	; 0x01
 aba:	11 0f       	add	r17, r17
 abc:	12 13       	cpse	r17, r18
 abe:	ed cf       	rjmp	.-38     	; 0xa9a <ignorePacket>
 ac0:	4a 81       	ldd	r20, Y+2	; 0x02
 ac2:	44 1f       	adc	r20, r20
 ac4:	09 36       	cpi	r16, 0x69	; 105
 ac6:	41 f1       	breq	.+80     	; 0xb18 <handleIn>
 ac8:	0d 32       	cpi	r16, 0x2D	; 45
 aca:	11 f0       	breq	.+4      	; 0xad0 <handleSetupOrOut>
 acc:	01 3e       	cpi	r16, 0xE1	; 225
 ace:	29 f7       	brne	.-54     	; 0xa9a <ignorePacket>

00000ad0 <handleSetupOrOut>:
 ad0:	00 93 09 01 	sts	0x0109, r16

00000ad4 <doReturn>:
 ad4:	3f 91       	pop	r19
 ad6:	4f 91       	pop	r20
 ad8:	1f 91       	pop	r17
 ada:	0f 91       	pop	r16
 adc:	2f 91       	pop	r18
 ade:	df 91       	pop	r29
 ae0:	ca b7       	in	r28, 0x3a	; 58
 ae2:	c6 fd       	sbrc	r28, 6
 ae4:	4f cf       	rjmp	.-354    	; 0x984 <waitForJ>

00000ae6 <sofError>:
 ae6:	cf 91       	pop	r28
 ae8:	cf bf       	out	0x3f, r28	; 63
 aea:	cf 91       	pop	r28
 aec:	18 95       	reti

00000aee <handleData>:
 aee:	20 91 09 01 	lds	r18, 0x0109
 af2:	22 23       	and	r18, r18
 af4:	79 f3       	breq	.-34     	; 0xad4 <doReturn>
 af6:	10 91 07 01 	lds	r17, 0x0107
 afa:	11 23       	and	r17, r17
 afc:	69 f5       	brne	.+90     	; 0xb58 <sendNakAndReti>
 afe:	34 30       	cpi	r19, 0x04	; 4
 b00:	6a f1       	brmi	.+90     	; 0xb5c <sendAckAndReti>
 b02:	30 93 07 01 	sts	0x0107, r19
 b06:	20 93 03 01 	sts	0x0103, r18
 b0a:	10 91 04 01 	lds	r17, 0x0104
 b0e:	3b e0       	ldi	r19, 0x0B	; 11
 b10:	31 1b       	sub	r19, r17
 b12:	30 93 04 01 	sts	0x0104, r19
 b16:	22 c0       	rjmp	.+68     	; 0xb5c <sendAckAndReti>

00000b18 <handleIn>:
 b18:	00 91 07 01 	lds	r16, 0x0107
 b1c:	01 30       	cpi	r16, 0x01	; 1
 b1e:	e4 f4       	brge	.+56     	; 0xb58 <sendNakAndReti>
 b20:	0a e5       	ldi	r16, 0x5A	; 90
 b22:	4f 70       	andi	r20, 0x0F	; 15
 b24:	49 f4       	brne	.+18     	; 0xb38 <handleIn1>
 b26:	30 91 61 00 	lds	r19, 0x0061
 b2a:	34 fd       	sbrc	r19, 4
 b2c:	19 c0       	rjmp	.+50     	; 0xb60 <sendCntAndReti>
 b2e:	00 93 61 00 	sts	0x0061, r16
 b32:	cb ee       	ldi	r28, 0xEB	; 235
 b34:	d0 e0       	ldi	r29, 0x00	; 0
 b36:	18 c0       	rjmp	.+48     	; 0xb68 <usbSendAndReti>

00000b38 <handleIn1>:
 b38:	30 91 f6 00 	lds	r19, 0x00F6
 b3c:	34 fd       	sbrc	r19, 4
 b3e:	10 c0       	rjmp	.+32     	; 0xb60 <sendCntAndReti>
 b40:	00 93 f6 00 	sts	0x00F6, r16
 b44:	c7 ef       	ldi	r28, 0xF7	; 247
 b46:	d0 e0       	ldi	r29, 0x00	; 0
 b48:	0f c0       	rjmp	.+30     	; 0xb68 <usbSendAndReti>

00000b4a <stuffN1Delay>:
 b4a:	27 95       	ror	r18
 b4c:	a8 f4       	brcc	.+42     	; 0xb78 <doExorN1>
 b4e:	51 50       	subi	r21, 0x01	; 1
 b50:	a9 f4       	brne	.+42     	; 0xb7c <commonN1>
 b52:	22 0f       	add	r18, r18
 b54:	00 00       	nop
 b56:	f9 cf       	rjmp	.-14     	; 0xb4a <stuffN1Delay>

00000b58 <sendNakAndReti>:
 b58:	4a e5       	ldi	r20, 0x5A	; 90
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <usbSendX3>

00000b5c <sendAckAndReti>:
 b5c:	42 ed       	ldi	r20, 0xD2	; 210
 b5e:	01 c0       	rjmp	.+2      	; 0xb62 <usbSendX3>

00000b60 <sendCntAndReti>:
 b60:	43 2f       	mov	r20, r19

00000b62 <usbSendX3>:
 b62:	c4 e1       	ldi	r28, 0x14	; 20
 b64:	d0 e0       	ldi	r29, 0x00	; 0
 b66:	32 e0       	ldi	r19, 0x02	; 2

00000b68 <usbSendAndReti>:
 b68:	11 b3       	in	r17, 0x11	; 17
 b6a:	15 60       	ori	r17, 0x05	; 5
 b6c:	90 9a       	sbi	0x12, 0	; 18
 b6e:	11 bb       	out	0x11, r17	; 17
 b70:	02 b3       	in	r16, 0x12	; 18
 b72:	20 e4       	ldi	r18, 0x40	; 64
 b74:	15 e0       	ldi	r17, 0x05	; 5
 b76:	5f 93       	push	r21

00000b78 <doExorN1>:
 b78:	01 27       	eor	r16, r17
 b7a:	56 e0       	ldi	r21, 0x06	; 6

00000b7c <commonN1>:
 b7c:	02 bb       	out	0x12, r16	; 18
 b7e:	27 95       	ror	r18
 b80:	20 f4       	brcc	.+8      	; 0xb8a <doExorN2>
 b82:	51 50       	subi	r21, 0x01	; 1
 b84:	21 f4       	brne	.+8      	; 0xb8e <commonN2>
 b86:	22 0f       	add	r18, r18
 b88:	f9 cf       	rjmp	.-14     	; 0xb7c <commonN1>

00000b8a <doExorN2>:
 b8a:	01 27       	eor	r16, r17
 b8c:	56 e0       	ldi	r21, 0x06	; 6

00000b8e <commonN2>:
 b8e:	00 00       	nop
 b90:	3b 5a       	subi	r19, 0xAB	; 171
 b92:	02 bb       	out	0x12, r16	; 18
 b94:	d0 f2       	brcs	.-76     	; 0xb4a <stuffN1Delay>

00000b96 <stuff6Delay>:
 b96:	27 95       	ror	r18
 b98:	28 f4       	brcc	.+10     	; 0xba4 <doExor6>
 b9a:	51 50       	subi	r21, 0x01	; 1
 b9c:	29 f4       	brne	.+10     	; 0xba8 <common6>
 b9e:	22 0f       	add	r18, r18
 ba0:	00 00       	nop
 ba2:	f9 cf       	rjmp	.-14     	; 0xb96 <stuff6Delay>

00000ba4 <doExor6>:
 ba4:	01 27       	eor	r16, r17
 ba6:	56 e0       	ldi	r21, 0x06	; 6

00000ba8 <common6>:
 ba8:	27 95       	ror	r18
 baa:	02 bb       	out	0x12, r16	; 18
 bac:	20 f4       	brcc	.+8      	; 0xbb6 <doExor7>
 bae:	51 50       	subi	r21, 0x01	; 1
 bb0:	21 f4       	brne	.+8      	; 0xbba <common7>
 bb2:	22 0f       	add	r18, r18
 bb4:	f9 cf       	rjmp	.-14     	; 0xba8 <common6>

00000bb6 <doExor7>:
 bb6:	01 27       	eor	r16, r17
 bb8:	56 e0       	ldi	r21, 0x06	; 6

00000bba <common7>:
 bba:	29 91       	ld	r18, Y+
 bbc:	33 23       	and	r19, r19
 bbe:	02 bb       	out	0x12, r16	; 18
 bc0:	21 f6       	brne	.-120    	; 0xb4a <stuffN1Delay>
 bc2:	0a 7f       	andi	r16, 0xFA	; 250
 bc4:	10 91 08 01 	lds	r17, 0x0108
 bc8:	11 0f       	add	r17, r17
 bca:	c6 51       	subi	r28, 0x16	; 22
 bcc:	d0 40       	sbci	r29, 0x00	; 0
 bce:	02 bb       	out	0x12, r16	; 18
 bd0:	11 f0       	breq	.+4      	; 0xbd6 <skipAddrAssign>
 bd2:	10 93 02 01 	sts	0x0102, r17

00000bd6 <skipAddrAssign>:
 bd6:	10 e4       	ldi	r17, 0x40	; 64
 bd8:	1a bf       	out	0x3a, r17	; 58
 bda:	01 60       	ori	r16, 0x01	; 1
 bdc:	11 b3       	in	r17, 0x11	; 17
 bde:	1a 7f       	andi	r17, 0xFA	; 250
 be0:	40 2f       	mov	r20, r16
 be2:	4a 7f       	andi	r20, 0xFA	; 250
 be4:	5f 91       	pop	r21
 be6:	00 c0       	rjmp	.+0      	; 0xbe8 <skipAddrAssign+0x12>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <skipAddrAssign+0x14>
 bea:	02 bb       	out	0x12, r16	; 18
 bec:	11 bb       	out	0x11, r17	; 17
 bee:	42 bb       	out	0x12, r20	; 18
 bf0:	71 cf       	rjmp	.-286    	; 0xad4 <doReturn>

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
